#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}


OPTIONS="
{% if thanos_query_frontend is defined %}
  {# log configuration #}
  --log.level={{ thanos_query_frontend.log.level | default('info') }} \
  {% if thanos_query_frontend.log.format is defined and
        thanos_query_frontend.log.format in ["logfmt", "json"] %}
  --log.format={{ thanos_query_frontend.log.format }} \
  {% endif %}
  {# HTTP Endpoint #}
  --http-address {{ thanos_query_frontend.http.listen_address }}:{{ thanos_query_frontend.http.listen_port }} \
  {% if thanos_query_frontend.http.grace_period is defined %}
  --http-grace-period={{ thanos_query_frontend.http.grace_period }} \
  {% endif %}
  --http-address {{ thanos_query_frontend.http.listen_address }}:{{ thanos_query_frontend.http.listen_port }} \
  {# labels #}
  {% if thanos_query_frontend.labels is defined and
        thanos_query_frontend.labels | default({}) | count > 0 %}
{#
      --labels.default-time-range=24h
                                 The default metadata time range duration for retrieving labels through Labels and Series API when the range parameters are not specified.
      --labels.max-query-parallelism=14
                                 Maximum number of labels requests will be scheduled in parallel by the Frontend.
      --labels.max-retries-per-request=5
                                 Maximum number of retries for a single label/series API request; beyond this, the downstream error is returned.
      --labels.partial-response  Enable partial response for labels requests if no partial_response param is specified. --no-labels.partial-response for disabling.
      --labels.response-cache-config=<content>
                                 Alternative to 'labels.response-cache-config-file' flag (mutually exclusive). Content of YAML file that contains response cache configuration.
      --labels.response-cache-config-file=<file-path>
                                 Path to YAML file that contains response cache configuration.
      --labels.response-cache-max-freshness=1m
                                 Most recent allowed cacheable result for labels requests, to prevent caching very recent results that might still be in flux.
      --labels.split-interval=24h
                                 Split labels requests by an interval and execute in parallel, it should be greater than 0 when labels.response-cache-config is configured.
#}
  {% endif %}
  {# query-frontend #}
  {% if thanos_query_frontend.frontend is defined and
        thanos_query_frontend.frontend | default({}) | count > 0 %}
{#
      --query-frontend.compress-responses
                                 Compress HTTP responses.
      --query-frontend.downstream-tripper-config=<content>
                                 Alternative to 'query-frontend.downstream-tripper-config-file' flag (mutually exclusive). Content of YAML file that contains downstream tripper configuration. If
                                 your downstream URL is localhost or 127.0.0.1 then it is highly recommended to increase max_idle_conns_per_host to at least 100.
      --query-frontend.downstream-tripper-config-file=<file-path>
                                 Path to YAML file that contains downstream tripper configuration. If your downstream URL is localhost or 127.0.0.1 then it is highly recommended to increase
                                 max_idle_conns_per_host to at least 100.
      --query-frontend.downstream-url="http://localhost:9090"
                                 URL of downstream Prometheus Query compatible API.
      --query-frontend.forward-header=<http-header-name> ...
                                 List of headers forwarded by the query-frontend to downstream queriers, default is empty
      --query-frontend.log-queries-longer-than=0
                                 Log queries that are slower than the specified duration. Set to 0 to disable. Set to < 0 to enable on all queries.
      --query-frontend.org-id-header=<http-header-name> ...
                                 Request header names used to identify the source of slow queries (repeated flag). The values of the header will be added to the org id field in the slow query
                                 log. If multiple headers match the request, the first matching arg specified will take precedence. If no headers match 'anonymous' will be used.
#}
  {% endif %}
  {# query-range #}
  {% if thanos_query_frontend.range is defined and
        thanos_query_frontend.range | default({}) | count > 0 %}
{#
      --query-range.align-range-with-step
                                 Mutate incoming queries to align their start and end with their step for better cache-ability. Note: Grafana dashboards do that by default.
      --query-range.max-query-length=0
                                 Limit the query time range (end - start time) in the query-frontend, 0 disables it.
      --query-range.max-query-parallelism=14
                                 Maximum number of query range requests will be scheduled in parallel by the Frontend.
      --query-range.max-retries-per-request=5
                                 Maximum number of retries for a single query range request; beyond this, the downstream error is returned.
      --query-range.partial-response
                                 Enable partial response for query range requests if no partial_response param is specified. --no-query-range.partial-response for disabling.
      --query-range.request-downsampled
                                 Make additional query for downsampled data in case of empty or incomplete response to range request.
      --query-range.response-cache-config=<content>
                                 Alternative to 'query-range.response-cache-config-file' flag (mutually exclusive). Content of YAML file that contains response cache configuration.
      --query-range.response-cache-config-file=<file-path>
                                 Path to YAML file that contains response cache configuration.
      --query-range.response-cache-max-freshness=1m
                                 Most recent allowed cacheable result for query range requests, to prevent caching very recent results that might still be in flux.
      --query-range.split-interval=24h
                                 Split query range requests by an interval and execute in parallel, it should be greater than 0 when query-range.response-cache-config is configured.
#}
  {% endif %}
{% endif %}
"

{#
thanos query-frontend --help
usage: thanos query-frontend [<flags>]

Query frontend command implements a service deployed in front of queriers to improve query parallelization and caching.

Flags:
      --cache-compression-type=""
                                 Use compression in results cache. Supported values are: 'snappy' and ‚Äù (disable compression).
  -h, --help                     Show context-sensitive help (also try --help-long and --help-man).
      --http-address="0.0.0.0:10902"
                                 Listen host:port for HTTP endpoints.
      --http-grace-period=2m     Time to wait after an interrupt received for HTTP Server.
      --http.config=""           [EXPERIMENTAL] Path to the configuration file that can enable TLS or authentication for all HTTP endpoints.
      --labels.default-time-range=24h
                                 The default metadata time range duration for retrieving labels through Labels and Series API when the range parameters are not specified.
      --labels.max-query-parallelism=14
                                 Maximum number of labels requests will be scheduled in parallel by the Frontend.
      --labels.max-retries-per-request=5
                                 Maximum number of retries for a single label/series API request; beyond this, the downstream error is returned.
      --labels.partial-response  Enable partial response for labels requests if no partial_response param is specified. --no-labels.partial-response for disabling.
      --labels.response-cache-config=<content>
                                 Alternative to 'labels.response-cache-config-file' flag (mutually exclusive). Content of YAML file that contains response cache configuration.
      --labels.response-cache-config-file=<file-path>
                                 Path to YAML file that contains response cache configuration.
      --labels.response-cache-max-freshness=1m
                                 Most recent allowed cacheable result for labels requests, to prevent caching very recent results that might still be in flux.
      --labels.split-interval=24h
                                 Split labels requests by an interval and execute in parallel, it should be greater than 0 when labels.response-cache-config is configured.
      --log.format=logfmt        Log format to use. Possible options: logfmt or json.
      --log.level=info           Log filtering level.
      --log.request.decision=    Deprecation Warning - This flag would be soon deprecated, and replaced with `request.logging-config`. Request Logging for logging the start and end of requests.
                                 By default this flag is disabled. LogFinishCall : Logs the finish call of the requests. LogStartAndFinishCall : Logs the start and finish call of the requests.
                                 NoLogCall : Disable request logging.
      --query-frontend.compress-responses
                                 Compress HTTP responses.
      --query-frontend.downstream-tripper-config=<content>
                                 Alternative to 'query-frontend.downstream-tripper-config-file' flag (mutually exclusive). Content of YAML file that contains downstream tripper configuration. If
                                 your downstream URL is localhost or 127.0.0.1 then it is highly recommended to increase max_idle_conns_per_host to at least 100.
      --query-frontend.downstream-tripper-config-file=<file-path>
                                 Path to YAML file that contains downstream tripper configuration. If your downstream URL is localhost or 127.0.0.1 then it is highly recommended to increase
                                 max_idle_conns_per_host to at least 100.
      --query-frontend.downstream-url="http://localhost:9090"
                                 URL of downstream Prometheus Query compatible API.
      --query-frontend.forward-header=<http-header-name> ...
                                 List of headers forwarded by the query-frontend to downstream queriers, default is empty
      --query-frontend.log-queries-longer-than=0
                                 Log queries that are slower than the specified duration. Set to 0 to disable. Set to < 0 to enable on all queries.
      --query-frontend.org-id-header=<http-header-name> ...
                                 Request header names used to identify the source of slow queries (repeated flag). The values of the header will be added to the org id field in the slow query
                                 log. If multiple headers match the request, the first matching arg specified will take precedence. If no headers match 'anonymous' will be used.
      --query-range.align-range-with-step
                                 Mutate incoming queries to align their start and end with their step for better cache-ability. Note: Grafana dashboards do that by default.
      --query-range.max-query-length=0
                                 Limit the query time range (end - start time) in the query-frontend, 0 disables it.
      --query-range.max-query-parallelism=14
                                 Maximum number of query range requests will be scheduled in parallel by the Frontend.
      --query-range.max-retries-per-request=5
                                 Maximum number of retries for a single query range request; beyond this, the downstream error is returned.
      --query-range.partial-response
                                 Enable partial response for query range requests if no partial_response param is specified. --no-query-range.partial-response for disabling.
      --query-range.request-downsampled
                                 Make additional query for downsampled data in case of empty or incomplete response to range request.
      --query-range.response-cache-config=<content>
                                 Alternative to 'query-range.response-cache-config-file' flag (mutually exclusive). Content of YAML file that contains response cache configuration.
      --query-range.response-cache-config-file=<file-path>
                                 Path to YAML file that contains response cache configuration.
      --query-range.response-cache-max-freshness=1m
                                 Most recent allowed cacheable result for query range requests, to prevent caching very recent results that might still be in flux.
      --query-range.split-interval=24h
                                 Split query range requests by an interval and execute in parallel, it should be greater than 0 when query-range.response-cache-config is configured.
      --request.logging-config=<content>
                                 Alternative to 'request.logging-config-file' flag (mutually exclusive). Content of YAML file with request logging configuration. See format details:
                                 https://thanos.io/tip/thanos/logging.md/#configuration
      --request.logging-config-file=<file-path>
                                 Path to YAML file with request logging configuration. See format details: https://thanos.io/tip/thanos/logging.md/#configuration
      --tracing.config=<content>
                                 Alternative to 'tracing.config-file' flag (mutually exclusive). Content of YAML file with tracing configuration. See format details:
                                 https://thanos.io/tip/thanos/tracing.md/#configuration
      --tracing.config-file=<file-path>
                                 Path to YAML file with tracing configuration. See format details: https://thanos.io/tip/thanos/tracing.md/#configuration
      --version                  Show application version.
      --web.disable-cors         Whether to disable CORS headers to be set by Thanos. By default Thanos sets CORS headers to be allowed by all.
#}
